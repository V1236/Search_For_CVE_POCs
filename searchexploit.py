import requests
import subprocess
import threading
import time
import json
import random
import os
from concurrent.futures import ThreadPoolExecutor

green_color = "\033[92m"
yellow_color = "\033[93m"
reset_color = "\033[0m"

# Max number of concurrent threads (adjust based on system capacity)
THREAD_LIMIT = 5

print(f"[!] If You Are Not Inputting a Proxy Roatator Than You Need to Edit The ExploitDB Sleep Time to 5,15")

GITHUB_TOKEN = "Replace"  # Get from https://github.com/settings/tokens

#DataImpulse Proxy Credentials
#PROXY_HOST = "Replace"  # Replace with your actual IP
#PROXY_PORT = "Replace"  # Replace with your proxy port
#PROXY_USER = "Replace"  # Replace with your proxy username
#PROXY_PASS = "Replace"  # Replace with your proxy password

# Proxy setup
proxies = {
    "http": f"http://{PROXY_USER}:{PROXY_PASS}@{PROXY_HOST}:{PROXY_PORT}",
    "https": f"https://{PROXY_USER}:{PROXY_PASS}@{PROXY_HOST}:{PROXY_PORT}"
}

def search_github_single(cve, results):
    """Search GitHub for a single CVE and store the results."""
    headers = {"Authorization": f"token {GITHUB_TOKEN}"}

    # Exclude noisy repositories
    EXCLUDE_REPOS = [
        "CVEProject/cvelist",
        "ossf-cve-benchmark",
        "microsoft/vulnerabilities",
        "qazbnm456/awesome-cve-poc",
    ]

    # GitHub Search Query
    GITHUB_SEARCH_URL = f"https://api.github.com/search/code?q={cve}+exploit+OR+POC+OR+proof-of-concept&per_page=10"

    try:
        github_response = requests.get(GITHUB_SEARCH_URL, headers=headers).json()
        github_poc_links = []

        for item in github_response.get("items", []):
            repo_name = item["repository"]["full_name"].lower()

            # Skip excluded repositories
            if repo_name in [repo.lower() for repo in EXCLUDE_REPOS]:
                continue

            if any(term in item["html_url"].lower() for term in ["poc", "exploit", "exploits", "proof", "example"]):
                github_poc_links.append(f"GitHub: {item['html_url']} ({repo_name})")

        if github_poc_links:
            print(f"\n{green_color}[+] GitHub Has Exploit Scripts for {cve}!{reset_color}\n")
            results.setdefault(cve, []).extend(github_poc_links)
        else:
            print(f"[-] No PoC found on GitHub for {cve}.")

    except Exception as e:
        print(f"[-] Error searching GitHub for {cve}: {e}")

def save_results(results, filename="results.txt"):
    #Writes findings to results.txt
    with open(filename, "w") as file:
        file.write("\n=== Exploit Search Results ===\n\n")
        for cve, sources in results.items():
            file.write(f"{cve}:\n")
            for source in sources:
                file.write(f"  - {source}\n")
            file.write("\n")
    print(f"\n[+] Results saved to {filename}\n")

def search_metasploit_single(cve, results_dict):
    msf_command = f'msfconsole -q -x "search cve:{cve}; exit"'
    try:
        result = subprocess.run(msf_command, shell=True, capture_output=True, text=True)
        output = result.stdout.strip()

        if "No" not in output:
            results_dict[cve] = ["Exists in Metasploit"]
            color = "\033[92m"
            reset_color = "\033[0m"
            print(f"\n{color}[+] Modules Found for {cve} in Metasploit!{reset_color}\n")
        else:
            print(f"[-] No exploits found for {cve} in Metasploit.")

    except FileNotFoundError:
        print("[!] Metasploit not found. Ensure `msfconsole` is installed and in PATH.")
    
    time.sleep(0.5)  # Prevent overload

def search_metasploit_threaded(cve_list):
    results = {}
    with ThreadPoolExecutor(max_workers=THREAD_LIMIT) as executor:
        executor.map(lambda cve: search_metasploit_single(cve, results), cve_list)
    return results

def search_exploitdb_single(cve, results_dict):
    base_url = "https://www.exploit-db.com/search"
    
    # Query parameters that match the request structure
    params = {
        "cve": cve,
        "draw": 1,
        "columns[0][data]": "date_published",
        "columns[0][name]": "date_published",
        "columns[0][searchable]": "true",
        "columns[0][orderable]": "true",
        "columns[0][search][value]": "",
        "columns[0][search][regex]": "false",
        "columns[1][data]": "download",
        "columns[1][name]": "download",
        "columns[1][searchable]": "false",
        "columns[1][orderable]": "false",
        "columns[1][search][value]": "",
        "columns[1][search][regex]": "false",
        "columns[4][data]": "description",
        "columns[4][name]": "description",
        "columns[4][searchable]": "true",
        "columns[4][orderable]": "false",
        "columns[4][search][value]": "",
        "columns[4][search][regex]": "false",
        "order[0][column]": 0,
        "order[0][dir]": "desc",
        "start": 0,
        "length": 15,
        "search[value]": "",
        "search[regex]": "false"
    }

    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.6533.100 Safari/537.36",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "X-Requested-With": "XMLHttpRequest",
        "Referer": f"https://www.exploit-db.com/search?cve={cve}",
    }
    try:
        session = requests.Session()
        if PROXY_HOST != "Replace":
            session.proxies.update(proxies)
        response = session.get(base_url, params=params, headers=headers, timeout=10)

        # Handle rate limits or blocked requests
        if response.status_code == 429:
            print(f"[!] Rate limited! Retrying {cve} later...")
            time.sleep(random.uniform(30, 60))
            return
        if response.status_code == 403:
            print(f"[!] Blocked! Check proxy settings for {cve}.")
            return

        try:
            data = response.json()
            
            if data.get("recordsTotal", 0) > 0:
                results_dict[cve] = ["Exists in Exploit-DB"]
                color = "\033[92m"
                reset_color = "\033[0m"
                print(f"\n{color}[+] {data['recordsTotal']} Exploit/s Found for {cve} in Exploit-DB Online!{reset_color}\n")
            else:
                print(f"[-] No exploits found for {cve} in Exploit-DB.")
            return

        except json.JSONDecodeError:
            print(f"[!] Warning: JSON parsing failed for {cve}")

    except requests.exceptions.RequestException as e:
        print(f"[!] Error fetching {cve}: {e}")
        return

    time.sleep(random.uniform(1, 2))  #If not using proxyrotation this needs to be 5 & 15

def search_exploitdb_threaded(cve_list):
    #Runs Exploit-DB searches with threads
    results = {}
    with ThreadPoolExecutor(max_workers=THREAD_LIMIT) as executor:
        executor.map(lambda cve: search_exploitdb_single(cve, results), cve_list)
    return results

def search_searchsploit_single(cve, results_dict):

    try:
        result = subprocess.run(["searchsploit", "--cve", cve], capture_output=True, text=True)
        output = result.stdout.strip()

        if "No Results" not in output:
            results_dict[cve] = ["Exists in searchsploit"]
            print(f"\n[+] Exploit Found for {cve} in searchsploit!\n")
        else:
            print(f"[-] No exploits found for {cve} in searchsploit.")

    except FileNotFoundError:
        print("[!] searchsploit not found. Ensure exploitdb is installed.")
    
    time.sleep(0.2)  # Prevent overload

def search_searchsploit_threaded(cve_list):
    #Runs searchsploit searches with threads
    results = {}
    with ThreadPoolExecutor(max_workers=THREAD_LIMIT) as executor:
        executor.map(lambda cve: search_searchsploit_single(cve, results), cve_list)
    return results

def search_github_threaded(cve_list):
    #Runs GitHub searches with threads
    results = {}
    with ThreadPoolExecutor(max_workers=THREAD_LIMIT) as executor:
        executor.map(lambda cve: search_github_single(cve, results), cve_list)
    return results

# Load CVEs from file
def load_cves_from_file(filename):
    #Loads CVEs from a text file, removing duplicates and empty lines
    try:
        with open(filename, "r") as file:
            cve_list = list(set(line.strip() for line in file if line.strip()))
        return cve_list
    except FileNotFoundError:
        print(f"[!] Error: File '{filename}' not found.")
        return []

# Main Execution
if __name__ == "__main__":
    cve_file = input("Filename with the CVE list (only text files supported) > ")
    #cve_file = "cve_list.txt"
    cve_list = load_cves_from_file(cve_file)

    if cve_list:
        results = {}

        print("\n=== Searching Exploit-DB Online ===\n")
        edb_results = search_exploitdb_threaded(cve_list)
        for cve, source in edb_results.items():
            results.setdefault(cve, []).extend(source)

        print("\n=== Searching searchsploit Locally ===\n")
        ss_results = search_searchsploit_threaded(cve_list)
        for cve, source in ss_results.items():
            results.setdefault(cve, []).extend(source)

        print("\n=== Searching GitHub ===\n")
        if GITHUB_TOKEN.lower().startswith("replace"):
            skip = input("[!] Github API Token not detected. Want to skip this one? (y/n) > ")
            if skip.lower().startswith("n"):
                print("[+] Initializing...")
                gh_results = search_github_threaded(cve_list)
                for cve, source in gh_results.items():
                    results.setdefault(cve, []).extend(source)
            else:
                print("[-] Skipping Github search. You can get an API Token at https://github.com/settings/tokens...")
        else:
            gh_results = search_github_threaded(cve_list)
            for cve, source in gh_results.items():
                results.setdefault(cve, []).extend(source)


        print("\n=== Searching Metasploit ===\n")
        skip = input("[!] Metasploit can take a long time for large lists, Do you want to skip it? (y/n) > ")
        if skip.lower().startswith("n"):
            print("[+] Initializing...")
            msf_results = search_metasploit_threaded(cve_list)
            results.update(msf_results)
        else:
            print("[-] Skipping Metasploit search...")

        # Print Summary of Results & save
        save_results(results)
        filename = "results.txt"

        if os.path.exists(filename):
            with open(filename, "r") as file:
                print(file.read())
        else:
            print("[-] File not found.")

    else:
        print("[!] No CVEs loaded! Make sure the file name is correct.")
